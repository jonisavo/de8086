#[derive(Debug, Copy, Clone, PartialEq)]
#[repr(u8)]
pub enum Opcode {
    UNKNOWN,
    AAA,
    AAD,
    AAM,
    AAS,
    ADC,
    ADD,
    AND,
    CALL,
    CBW,
    CLC,
    CLD,
    CLI,
    CMC,
    CMP,
    CMPSB,
    CMPSW,
    CWD,
    DAA,
    DAS,
    DEC,
    DIV,
    // ESC not yet implemented
    HLT,
    IDIV,
    IMUL,
    IN,
    INC,
    INT,
    INT3,
    INTO,
    IRET,
    JA,
    JAE,
    JB,
    JBE,
    JC,
    JCXZ,
    JE,
    JG,
    JGE,
    JL,
    JLE,
    JMP,
    JNC,
    JNE,
    JNO,
    JNP,
    JNS,
    JO,
    JP,
    JS,
    LAHF,
    LDS,
    LEA,
    LES,
    LOCK,
    LODSB,
    LODSW,
    LOOP,
    LOOPE,
    LOOPNE,
    MOV,
    MOVSB,
    MOVSW,
    MUL,
    NEG,
    NOP,
    NOT,
    OR,
    OUT,
    POP,
    POPF,
    PUSH,
    PUSHF,
    RCL,
    RCR,
    REP,
    REPE,
    REPNE,
    RET,
    RETF,
    ROL,
    ROR,
    SAHF,
    SAL,
    SAR,
    SBB,
    SCASB,
    SCASW,
    SEGMENT,
    SHR,
    STC,
    STD,
    STI,
    STOSB,
    STOSW,
    SUB,
    TEST,
    WAIT,
    XCHG,
    XLAT,
    XOR,
}

impl Opcode {
    const MNEMONICS: [&str; 102] = [
        "<unknown>",
        "aaa",
        "aad",
        "aam",
        "aas",
        "adc",
        "add",
        "and",
        "call",
        "cbw",
        "clc",
        "cld",
        "cli",
        "cmc",
        "cmp",
        "cmpsb",
        "cmpsw",
        "cwd",
        "daa",
        "das",
        "dec",
        "div", // ESC not yet implemented
        "hlt",
        "idiv",
        "imul",
        "in",
        "inc",
        "int",
        "int3",
        "into",
        "iret",
        "ja",
        "jae",
        "jb",
        "jbe",
        "jc",
        "jcxz",
        "je",
        "jg",
        "jge",
        "jl",
        "jle",
        "jmp",
        "jnc",
        "jne",
        "jno",
        "jnp",
        "jns",
        "jo",
        "jp",
        "js",
        "lahf",
        "lds",
        "lea",
        "les",
        "lock",
        "lodsb",
        "lodsw",
        "loop",
        "loope",
        "loopne",
        "mov",
        "movsb",
        "movsw",
        "mul",
        "neg",
        "nop",
        "not",
        "or",
        "out",
        "pop",
        "popf",
        "push",
        "pushf",
        "rcl",
        "rcr",
        "rep",
        "repe",
        "repne",
        "ret",
        "retf",
        "rol",
        "ror",
        "sahf",
        "sal",
        "sar",
        "sbb",
        "scasb",
        "scasw",
        "<segment>",
        "shr",
        "stc",
        "std",
        "sti",
        "stosb",
        "stosw",
        "sub",
        "test",
        "wait",
        "xchg",
        "xlat",
        "xor",
    ];

    pub fn get_mnemonic(self) -> &'static str {
        debug_assert!(
            (self as usize) < Opcode::MNEMONICS.len(),
            "Can not get mnemonic for out-of-bounds opcode {:?}",
            self
        );
        Opcode::MNEMONICS[self as usize]
    }
}
